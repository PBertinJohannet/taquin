var searchIndex = {};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["event_loop"] = {"doc":"A Piston event loop for games and interactive applications","items":[[3,"EventSettings","event_loop","Stores event loop settings.",null,null],[12,"max_fps","","The maximum number of frames per second",0,null],[12,"ups","","The number of updates per second",0,null],[12,"ups_reset","","The number of delayed updates before skipping them to catch up. When set to `0`, it will always try to catch up.",0,null],[12,"swap_buffers","","Enable or disable automatic swapping of buffers.",0,null],[12,"bench_mode","","Enable or disable benchmark mode. When enabled, it will render and update without sleep and ignore input. Used to test performance by playing through as fast as possible. Requires `lazy` to be set to `false`.",0,null],[12,"lazy","","Enable or disable rendering only when receiving input. When enabled, update and idle events are disabled.",0,null],[3,"Events","","An event loop iterator",null,null],[17,"DEFAULT_UPS","","The default updates per second.",null,null],[17,"DEFAULT_UPS_RESET","","The default delayed updates reset.",null,null],[17,"DEFAULT_MAX_FPS","","The default maximum frames per second.",null,null],[8,"EventLoop","","Methods implemented for changing event loop settings.",null,null],[10,"get_event_settings","","Returns event loop settings.",1,{"inputs":[{"name":"self"}],"output":{"name":"eventsettings"}}],[10,"set_event_settings","","Sets event loop settings.",1,{"inputs":[{"name":"self"},{"name":"eventsettings"}],"output":null}],[11,"set_ups","","The number of updates per second",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"ups","","The number of updates per second",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"set_ups_reset","","The number of delayed updates before skipping them to catch up. When set to `0`, it will always try to catch up.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"ups_reset","","The number of delayed updates before skipping them to catch up. When set to `0`, it will always try to catch up.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"set_max_fps","","The maximum number of frames per second",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"max_fps","","The maximum number of frames per second",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"set_swap_buffers","","Enable or disable automatic swapping of buffers.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"swap_buffers","","Enable or disable automatic swapping of buffers.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_bench_mode","","Enable or disable benchmark mode. When enabled, it will render and update without sleep and ignore input. Used to test performance by playing through as fast as possible. Requires `lazy` to be set to `false`.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"bench_mode","","Enable or disable benchmark mode. When enabled, it will render and update without sleep and ignore input. Used to test performance by playing through as fast as possible. Requires `lazy` to be set to `false`.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_lazy","","Enable or disable rendering only when receiving input. When enabled, update events are disabled. Idle events are emitted while receiving input.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"lazy","","Enable or disable rendering only when receiving input. When enabled, update events are disabled. Idle events are emitted while receiving input.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"eventsettings"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates new with default settings.",0,{"inputs":[],"output":{"name":"eventsettings"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"eventsettings"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"new","","Creates a new event iterator with default UPS and FPS settings.",2,{"inputs":[{"name":"eventsettings"}],"output":{"name":"events"}}],[11,"next","","Returns the next event.",2,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["event"],"name":"option"}}],[11,"get_event_settings","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"set_event_settings","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"get_event_settings","","",2,{"inputs":[{"name":"self"}],"output":{"name":"eventsettings"}}],[11,"set_event_settings","","",2,{"inputs":[{"name":"self"},{"name":"eventsettings"}],"output":null}]],"paths":[[3,"EventSettings"],[8,"EventLoop"],[3,"Events"]]};
searchIndex["fifteen_gui"] = {"doc":"","items":[],"paths":[]};
searchIndex["float"] = {"doc":"Traits for generic floats in game programming","items":[[8,"Float","float","Convenience trait for floats.",null,null],[8,"Min","","Minimum value.",null,null],[10,"min","","Returns the minimum value of self or other.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Max","","Maximum value.",null,null],[10,"max","","Returns the maximum value of self or other.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signum","","The sign of the number.",null,null],[10,"signum","","Returns number representing the sign of self",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Powf","","Floating number power.",null,null],[10,"powf","","Returns floating power of the number.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Radians","","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",4,{"inputs":[],"output":{"name":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",4,{"inputs":[],"output":{"name":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",4,{"inputs":[],"output":{"name":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees. Equivalent to `value * (π / 180)`.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians. Equivalent to `value * (180 / π)`.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"One","","Number 1.",null,null],[10,"one","","Returns 1.",5,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Number 0.",null,null],[10,"zero","","Returns 0.",6,{"inputs":[],"output":{"name":"self"}}],[8,"Sqrt","","Square root.",null,null],[10,"sqrt","","Returns square root.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Trig","","Basic trigonometry functions",null,null],[10,"sin","","Returns sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Returns cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Returns tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Returns inverse sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Returns inverse cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Returns inverse tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Returns the four quadrant arctangent of self (y) and other (x).",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Returns hyperbolic sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Returns hyperbolic cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Returns hyperbolic tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Returns inverse hyperbolic sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Returns inverse hyperbolic cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Returns inverse hyperbolic tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Cast","","Casts into another type.",null,null],[10,"cast","","Casts into other type.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","Trait for converting from different numeric types",null,null],[10,"from_f64","","from a f64",10,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[10,"from_f32","","from a f32",10,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[10,"from_isize","","from a isze",10,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[10,"from_u32","","from a u32",10,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"from_i32","","from a i32",10,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}]],"paths":[[8,"Min"],[8,"Max"],[8,"Signum"],[8,"Powf"],[8,"Radians"],[8,"One"],[8,"Zero"],[8,"Sqrt"],[8,"Trig"],[8,"Cast"],[8,"FromPrimitive"]]};
searchIndex["input"] = {"doc":"A flexible structure for user interactions to be used in window frameworks and widgets libraries.","items":[[3,"AfterRenderArgs","input","After render arguments.",null,null],[3,"CloseArgs","","Close arguments.",null,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",0,null],[3,"ButtonArgs","","Button arguments",null,null],[12,"state","","New state of the button.",1,null],[12,"button","","The button that changed state.",1,null],[12,"scancode","","An optional scancode that tells the physical layout of a keyboard key. For other devices than keyboard, this is set to `None`.",1,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",2,null],[12,"width","","The width of rendered area in points.",2,null],[12,"height","","The height of rendered area in points.",2,null],[12,"draw_width","","The width of rendered area in pixels.",2,null],[12,"draw_height","","The height of rendered area in pixels.",2,null],[3,"TouchArgs","","Touch arguments",null,null],[12,"device","","A unique identifier for touch device.",3,null],[12,"id","","A unique identifier for touch event.",3,null],[12,"x","","The x coordinate of the touch position, normalized 0..1.",3,null],[12,"y","","The y coordinate of the touch position, normalized 0..1.",3,null],[12,"z","","The z coordinate of the touch position, normalized 0..1.",3,null],[12,"px","","The x coordinate of the touch pressure direction.",3,null],[12,"py","","The y coordinate of the touch pressure direction.",3,null],[12,"pz","","The z coordinate of the touch pressure direction.",3,null],[12,"is_3d","","Whether the touch is in 3D.",3,null],[12,"touch","","The touch state.",3,null],[3,"UpdateArgs","","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",4,null],[3,"EventId","","Used to identify events arguments provided by traits.",null,null],[12,"0","","",5,null],[4,"ButtonState","","Stores button state.",null,null],[13,"Press","","Button was pressed.",6,null],[13,"Release","","Button was released.",6,null],[4,"Touch","","Stores the touch state.",null,null],[13,"Start","","The start of touch, for example a finger pressed down on a touch screen.",7,null],[13,"Move","","The move of touch, for example a finger moving while touching a touch screen.",7,null],[13,"End","","The end of touch, for example taking a finger away from a touch screen.",7,null],[13,"Cancel","","The cancel of touch, for example the window loses focus.",7,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",8,null],[13,"Mouse","","A mouse button.",8,null],[13,"Controller","","A controller button.",8,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",9,null],[13,"MouseRelative","","x and y in relative coordinates.",9,null],[13,"MouseScroll","","x and y in scroll ticks.",9,null],[13,"ControllerAxis","","controller axis move event.",9,null],[13,"Touch","","touch event.",9,null],[4,"Input","","Models input events.",null,null],[13,"Button","","Changed button state.",10,null],[13,"Move","","Moved mouse cursor.",10,null],[13,"Text","","Text (usually from keyboard).",10,null],[13,"Resize","","Window got resized.",10,null],[13,"Focus","","Window gained or lost focus.",10,null],[13,"Cursor","","Window gained or lost cursor.",10,null],[13,"Close","","Window closed.",10,null],[4,"Loop","","Models loop events.",null,null],[13,"Render","","Render graphics.",11,null],[13,"AfterRender","","After rendering and swapping buffers.",11,null],[13,"Update","","Update the state of the application.",11,null],[13,"Idle","","Do background tasks that can be done incrementally.",11,null],[4,"Event","","Models all events.",null,null],[13,"Input","","Input events.",12,null],[13,"Loop","","Events that commonly used by event loops.",12,null],[13,"Custom","","Custom event.",12,null],[0,"controller","","Back-end agnostic controller events.",null,null],[3,"ControllerButton","input::controller","Components of a controller button event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller was the button on.",13,null],[12,"button","","Which button was pressed.",13,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller moved.",14,null],[12,"axis","","The axis that moved.",14,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use a different range for various devices.",14,null],[8,"ControllerAxisEvent","","The position of a controller axis changed.",null,null],[10,"from_controller_axis_args","","Creates a controller axis event.",15,{"inputs":[{"name":"controlleraxisargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"controller_axis","","Calls closure if this is a controller axis event.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"controller_axis_args","","Returns controller axis arguments.",15,{"inputs":[{"name":"self"}],"output":{"generics":["controlleraxisargs"],"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"controllerbutton"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"new","","Create a new ControllerButton object. Intended for use by backends when emitting events.",13,{"inputs":[{"name":"i32"},{"name":"u8"}],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"controlleraxisargs"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when emitting events.",14,{"inputs":[{"name":"i32"},{"name":"u8"},{"name":"f64"}],"output":{"name":"self"}}],[11,"from_controller_axis_args","input","",12,{"inputs":[{"name":"controlleraxisargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"controller_axis","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","input::keyboard","",null,null],[4,"Key","","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",16,null],[13,"Backspace","","",16,null],[13,"Tab","","",16,null],[13,"Return","","",16,null],[13,"Escape","","",16,null],[13,"Space","","",16,null],[13,"Exclaim","","",16,null],[13,"Quotedbl","","",16,null],[13,"Hash","","",16,null],[13,"Dollar","","",16,null],[13,"Percent","","",16,null],[13,"Ampersand","","",16,null],[13,"Quote","","",16,null],[13,"LeftParen","","",16,null],[13,"RightParen","","",16,null],[13,"Asterisk","","",16,null],[13,"Plus","","",16,null],[13,"Comma","","",16,null],[13,"Minus","","",16,null],[13,"Period","","",16,null],[13,"Slash","","",16,null],[13,"D0","","",16,null],[13,"D1","","",16,null],[13,"D2","","",16,null],[13,"D3","","",16,null],[13,"D4","","",16,null],[13,"D5","","",16,null],[13,"D6","","",16,null],[13,"D7","","",16,null],[13,"D8","","",16,null],[13,"D9","","",16,null],[13,"Colon","","",16,null],[13,"Semicolon","","",16,null],[13,"Less","","",16,null],[13,"Equals","","",16,null],[13,"Greater","","",16,null],[13,"Question","","",16,null],[13,"At","","",16,null],[13,"LeftBracket","","",16,null],[13,"Backslash","","",16,null],[13,"RightBracket","","",16,null],[13,"Caret","","",16,null],[13,"Underscore","","",16,null],[13,"Backquote","","",16,null],[13,"A","","",16,null],[13,"B","","",16,null],[13,"C","","",16,null],[13,"D","","",16,null],[13,"E","","",16,null],[13,"F","","",16,null],[13,"G","","",16,null],[13,"H","","",16,null],[13,"I","","",16,null],[13,"J","","",16,null],[13,"K","","",16,null],[13,"L","","",16,null],[13,"M","","",16,null],[13,"N","","",16,null],[13,"O","","",16,null],[13,"P","","",16,null],[13,"Q","","",16,null],[13,"R","","",16,null],[13,"S","","",16,null],[13,"T","","",16,null],[13,"U","","",16,null],[13,"V","","",16,null],[13,"W","","",16,null],[13,"X","","",16,null],[13,"Y","","",16,null],[13,"Z","","",16,null],[13,"Delete","","",16,null],[13,"CapsLock","","",16,null],[13,"F1","","",16,null],[13,"F2","","",16,null],[13,"F3","","",16,null],[13,"F4","","",16,null],[13,"F5","","",16,null],[13,"F6","","",16,null],[13,"F7","","",16,null],[13,"F8","","",16,null],[13,"F9","","",16,null],[13,"F10","","",16,null],[13,"F11","","",16,null],[13,"F12","","",16,null],[13,"PrintScreen","","",16,null],[13,"ScrollLock","","",16,null],[13,"Pause","","",16,null],[13,"Insert","","",16,null],[13,"Home","","",16,null],[13,"PageUp","","",16,null],[13,"End","","",16,null],[13,"PageDown","","",16,null],[13,"Right","","",16,null],[13,"Left","","",16,null],[13,"Down","","",16,null],[13,"Up","","",16,null],[13,"NumLockClear","","",16,null],[13,"NumPadDivide","","",16,null],[13,"NumPadMultiply","","",16,null],[13,"NumPadMinus","","",16,null],[13,"NumPadPlus","","",16,null],[13,"NumPadEnter","","",16,null],[13,"NumPad1","","",16,null],[13,"NumPad2","","",16,null],[13,"NumPad3","","",16,null],[13,"NumPad4","","",16,null],[13,"NumPad5","","",16,null],[13,"NumPad6","","",16,null],[13,"NumPad7","","",16,null],[13,"NumPad8","","",16,null],[13,"NumPad9","","",16,null],[13,"NumPad0","","",16,null],[13,"NumPadPeriod","","",16,null],[13,"Application","","",16,null],[13,"Power","","",16,null],[13,"NumPadEquals","","",16,null],[13,"F13","","",16,null],[13,"F14","","",16,null],[13,"F15","","",16,null],[13,"F16","","",16,null],[13,"F17","","",16,null],[13,"F18","","",16,null],[13,"F19","","",16,null],[13,"F20","","",16,null],[13,"F21","","",16,null],[13,"F22","","",16,null],[13,"F23","","",16,null],[13,"F24","","",16,null],[13,"Execute","","",16,null],[13,"Help","","",16,null],[13,"Menu","","",16,null],[13,"Select","","",16,null],[13,"Stop","","",16,null],[13,"Again","","",16,null],[13,"Undo","","",16,null],[13,"Cut","","",16,null],[13,"Copy","","",16,null],[13,"Paste","","",16,null],[13,"Find","","",16,null],[13,"Mute","","",16,null],[13,"VolumeUp","","",16,null],[13,"VolumeDown","","",16,null],[13,"NumPadComma","","",16,null],[13,"NumPadEqualsAS400","","",16,null],[13,"AltErase","","",16,null],[13,"Sysreq","","",16,null],[13,"Cancel","","",16,null],[13,"Clear","","",16,null],[13,"Prior","","",16,null],[13,"Return2","","",16,null],[13,"Separator","","",16,null],[13,"Out","","",16,null],[13,"Oper","","",16,null],[13,"ClearAgain","","",16,null],[13,"CrSel","","",16,null],[13,"ExSel","","",16,null],[13,"NumPad00","","",16,null],[13,"NumPad000","","",16,null],[13,"ThousandsSeparator","","",16,null],[13,"DecimalSeparator","","",16,null],[13,"CurrencyUnit","","",16,null],[13,"CurrencySubUnit","","",16,null],[13,"NumPadLeftParen","","",16,null],[13,"NumPadRightParen","","",16,null],[13,"NumPadLeftBrace","","",16,null],[13,"NumPadRightBrace","","",16,null],[13,"NumPadTab","","",16,null],[13,"NumPadBackspace","","",16,null],[13,"NumPadA","","",16,null],[13,"NumPadB","","",16,null],[13,"NumPadC","","",16,null],[13,"NumPadD","","",16,null],[13,"NumPadE","","",16,null],[13,"NumPadF","","",16,null],[13,"NumPadXor","","",16,null],[13,"NumPadPower","","",16,null],[13,"NumPadPercent","","",16,null],[13,"NumPadLess","","",16,null],[13,"NumPadGreater","","",16,null],[13,"NumPadAmpersand","","",16,null],[13,"NumPadDblAmpersand","","",16,null],[13,"NumPadVerticalBar","","",16,null],[13,"NumPadDblVerticalBar","","",16,null],[13,"NumPadColon","","",16,null],[13,"NumPadHash","","",16,null],[13,"NumPadSpace","","",16,null],[13,"NumPadAt","","",16,null],[13,"NumPadExclam","","",16,null],[13,"NumPadMemStore","","",16,null],[13,"NumPadMemRecall","","",16,null],[13,"NumPadMemClear","","",16,null],[13,"NumPadMemAdd","","",16,null],[13,"NumPadMemSubtract","","",16,null],[13,"NumPadMemMultiply","","",16,null],[13,"NumPadMemDivide","","",16,null],[13,"NumPadPlusMinus","","",16,null],[13,"NumPadClear","","",16,null],[13,"NumPadClearEntry","","",16,null],[13,"NumPadBinary","","",16,null],[13,"NumPadOctal","","",16,null],[13,"NumPadDecimal","","",16,null],[13,"NumPadHexadecimal","","",16,null],[13,"LCtrl","","",16,null],[13,"LShift","","",16,null],[13,"LAlt","","",16,null],[13,"LGui","","",16,null],[13,"RCtrl","","",16,null],[13,"RShift","","",16,null],[13,"RAlt","","",16,null],[13,"RGui","","",16,null],[13,"Mode","","",16,null],[13,"AudioNext","","",16,null],[13,"AudioPrev","","",16,null],[13,"AudioStop","","",16,null],[13,"AudioPlay","","",16,null],[13,"AudioMute","","",16,null],[13,"MediaSelect","","",16,null],[13,"Www","","",16,null],[13,"Mail","","",16,null],[13,"Calculator","","",16,null],[13,"Computer","","",16,null],[13,"AcSearch","","",16,null],[13,"AcHome","","",16,null],[13,"AcBack","","",16,null],[13,"AcForward","","",16,null],[13,"AcStop","","",16,null],[13,"AcRefresh","","",16,null],[13,"AcBookmarks","","",16,null],[13,"BrightnessDown","","",16,null],[13,"BrightnessUp","","",16,null],[13,"DisplaySwitch","","",16,null],[13,"KbdIllumToggle","","",16,null],[13,"KbdIllumDown","","",16,null],[13,"KbdIllumUp","","",16,null],[13,"Eject","","",16,null],[13,"Sleep","","",16,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NO_MODIFIER","","No modifier.",17,null],[18,"CTRL","","Ctrl.",17,null],[18,"SHIFT","","Shift.",17,null],[18,"ALT","","Alt.",17,null],[18,"GUI","","Gui.",17,null],[18,"CTRL_SHIFT","","Ctrl + Shift.",17,null],[18,"CTRL_ALT","","Ctrl + Alt.",17,null],[18,"CTRL_GUI","","Ctrl + Gui.",17,null],[18,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",17,null],[18,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",17,null],[18,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",17,null],[18,"SHIFT_ALT","","Shift + Alt.",17,null],[18,"SHIFT_GUI","","Shift + Gui.",17,null],[18,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",17,null],[18,"ALT_GUI","","Alt + Gui.",17,null],[11,"empty","","Returns an empty set of flags.",17,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",17,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",17,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",17,{"inputs":[{"name":"u8"}],"output":{"generics":["modifierkey"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",17,{"inputs":[{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitor_assign","","Adds the set of flags.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitxor_assign","","Toggles the set of flags.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"sub_assign","","Disables all flags enabled in the set.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",17,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",17,{"inputs":[{"name":"t"}],"output":{"name":"modifierkey"}}],[11,"event","","Change modifier key state depending on input.",17,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"default","","",17,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"from","","",16,{"inputs":[{"name":"u32"}],"output":{"name":"key"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"ordering"}}],[11,"code","","Returns an id of the key",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[0,"mouse","input","Back-end agnostic mouse buttons.",null,null],[4,"MouseButton","input::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",18,null],[13,"Left","","Left mouse button.",18,null],[13,"Right","","Right mouse button.",18,null],[13,"Middle","","Middle mouse button.",18,null],[13,"X1","","Extra mouse button number 1.",18,null],[13,"X2","","Extra mouse button number 2.",18,null],[13,"Button6","","Mouse button number 6.",18,null],[13,"Button7","","Mouse button number 7.",18,null],[13,"Button8","","Mouse button number 8.",18,null],[8,"MouseCursorEvent","","The position of the mouse cursor",null,null],[10,"from_xy","","Creates a mouse cursor event.",19,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_cursor","","Calls closure if this is a mouse cursor event.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_cursor_args","","Returns mouse cursor arguments.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MouseRelativeEvent","","The relative movement of mouse cursor",null,null],[10,"from_xy","","Creates a mouse relative event.",20,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_relative","","Calls closure if this is a mouse relative event.",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_relative_args","","Returns mouse relative arguments.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MouseScrollEvent","","The scroll of the mouse wheel",null,null],[10,"from_xy","","Creates a mouse scroll event.",21,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_scroll","","Calls a closure if this is a mouse scroll event.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_scroll_args","","Returns mouse scroll arguments.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"mousebutton"}}],[11,"from_xy","input","",12,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_cursor","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",12,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_relative","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",12,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_scroll","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[0,"generic_event","","Trait for generic events",null,null],[8,"GenericEvent","input::generic_event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",22,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[10,"with_args","","Calls closure with arguments",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"event_id","input","",12,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"with_args","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"afterrenderargs"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_after_render_args","","",12,{"inputs":[{"name":"afterrenderargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"after_render","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"buttonargs"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"buttonargs"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"buttonargs"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_button_args","","",12,{"inputs":[{"name":"buttonargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"button","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"closeargs"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"closeargs"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_close_args","","",12,{"inputs":[{"name":"closeargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"close","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_cursor","","",12,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[11,"cursor","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_focused","","",12,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[11,"focus","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"idleargs"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_idle_args","","",12,{"inputs":[{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"idle","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"renderargs"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"viewport","","Returns viewport information filling entire render area.",2,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"from_render_args","","",12,{"inputs":[{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"render","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_width_height","","",12,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[11,"resize","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_text","","",12,{"inputs":[{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[11,"text","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"touch"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"touchargs"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates arguments for 2D touch.",3,null],[11,"new_3d","","Creates arguments for 3D touch.",3,null],[11,"position","","The position of the touch in 2D.",3,null],[11,"position_3d","","The position of the touch in 3D.",3,null],[11,"pressure","","The pressure magnitude, normalized 0..1.",3,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"pressure_3d","","The pressure vector in 3D.",3,null],[11,"from_touch_args","","",12,{"inputs":[{"name":"touchargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"touch","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"updateargs"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_update_args","","",12,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"update","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"AfterRenderEvent","","After rendering and buffers are swapped.",null,null],[10,"from_after_render_args","","Creates an after render event.",25,{"inputs":[{"name":"afterrenderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"after_render","","Calls closure if this is an after render event.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",25,{"inputs":[{"name":"self"}],"output":{"generics":["afterrenderargs"],"name":"option"}}],[8,"CloseEvent","","Window is closing.",null,null],[10,"from_close_args","","Creates a close event from arguments.",26,{"inputs":[{"name":"closeargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"close","","Calls closure if this is a close event.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"close_args","","Returns close arguments.",26,{"inputs":[{"name":"self"}],"output":{"generics":["closeargs"],"name":"option"}}],[8,"CursorEvent","","When window gets or loses cursor",null,null],[10,"from_cursor","","Creates a cursor event.",27,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"cursor","","Calls closure if this is a cursor event.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",27,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[8,"FocusEvent","","When window gets or loses focus",null,null],[10,"from_focused","","Creates a focus event.",28,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"focus","","Calls closure if this is a focus event.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",28,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[8,"IdleEvent","","When background tasks should be performed",null,null],[10,"from_idle_args","","Creates an idle event.",29,{"inputs":[{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",29,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"idle","","Calls closure if this is an idle event.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",29,{"inputs":[{"name":"self"}],"output":{"generics":["idleargs"],"name":"option"}}],[8,"ButtonEvent","","Changed button state.",null,null],[10,"from_button_args","","Creates a button event.",30,{"inputs":[{"name":"buttonargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"button","","Calls closure if this is a button event.",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"button_args","","Returns button arguments.",30,{"inputs":[{"name":"self"}],"output":{"generics":["buttonargs"],"name":"option"}}],[8,"PressEvent","","The press of a button",null,null],[10,"from_button","","Creates a press event.",31,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"press","","Calls closure if this is a press event.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",31,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[8,"ReleaseEvent","","The release of a button",null,null],[10,"from_button","","Creates a release event.",32,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"release","","Calls closure if this is a release event.",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",32,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[8,"ResizeEvent","","When the window is resized",null,null],[10,"from_width_height","","Creates a resize event.",33,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[10,"resize","","Calls closure if this is a resize event.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"RenderEvent","","When the next frame should be rendered",null,null],[10,"from_render_args","","Creates a render event.",34,{"inputs":[{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"render","","Calls closure if this is a render event.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",34,{"inputs":[{"name":"self"}],"output":{"generics":["renderargs"],"name":"option"}}],[8,"TextEvent","","When receiving text from user, such as typing a character",null,null],[10,"from_text","","Creates a text event.",35,{"inputs":[{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[10,"text","","Calls closure if this is a text event.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[8,"TouchEvent","","When a touch is started, moved, ended or cancelled.",null,null],[10,"from_touch_args","","Creates a touch event.",36,{"inputs":[{"name":"touchargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"touch","","Calls closure if this is a touch event.",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"touch_args","","Returns touch arguments.",36,{"inputs":[{"name":"self"}],"output":{"generics":["touchargs"],"name":"option"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",37,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",37,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"update","","Calls closure if this is an update event.",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",37,{"inputs":[{"name":"self"}],"output":{"generics":["updateargs"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"motion"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"loop"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"loop"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"loop"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"from","","",8,{"inputs":[{"name":"key"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"mousebutton"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"controllerbutton"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"buttonargs"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"touchargs"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"touchargs"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"motion"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"renderargs"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"renderargs"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"updateargs"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"updateargs"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"idleargs"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"idleargs"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"closeargs"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"loop"}],"output":{"name":"self"}}],[11,"into","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["input"],"name":"option"}}],[11,"into","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["loop"],"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",25,{"inputs":[{"name":"self"}],"output":{"generics":["afterrenderargs"],"name":"option"}}],[11,"button_args","","Returns button arguments.",30,{"inputs":[{"name":"self"}],"output":{"generics":["buttonargs"],"name":"option"}}],[11,"press_args","","Returns press arguments.",31,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[11,"release_args","","Returns release arguments.",32,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[11,"close_args","","Returns close arguments.",26,{"inputs":[{"name":"self"}],"output":{"generics":["closeargs"],"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",27,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"focus_args","","Returns focus arguments.",28,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",29,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",29,{"inputs":[{"name":"self"}],"output":{"generics":["idleargs"],"name":"option"}}],[11,"render_args","","Returns render arguments.",34,{"inputs":[{"name":"self"}],"output":{"generics":["renderargs"],"name":"option"}}],[11,"resize_args","","Returns resize arguments.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"touch_args","","Returns touch arguments.",36,{"inputs":[{"name":"self"}],"output":{"generics":["touchargs"],"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",37,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",37,{"inputs":[{"name":"self"}],"output":{"generics":["updateargs"],"name":"option"}}]],"paths":[[3,"IdleArgs"],[3,"ButtonArgs"],[3,"RenderArgs"],[3,"TouchArgs"],[3,"UpdateArgs"],[3,"EventId"],[4,"ButtonState"],[4,"Touch"],[4,"Button"],[4,"Motion"],[4,"Input"],[4,"Loop"],[4,"Event"],[3,"ControllerButton"],[3,"ControllerAxisArgs"],[8,"ControllerAxisEvent"],[4,"Key"],[3,"ModifierKey"],[4,"MouseButton"],[8,"MouseCursorEvent"],[8,"MouseRelativeEvent"],[8,"MouseScrollEvent"],[8,"GenericEvent"],[3,"AfterRenderArgs"],[3,"CloseArgs"],[8,"AfterRenderEvent"],[8,"CloseEvent"],[8,"CursorEvent"],[8,"FocusEvent"],[8,"IdleEvent"],[8,"ButtonEvent"],[8,"PressEvent"],[8,"ReleaseEvent"],[8,"ResizeEvent"],[8,"RenderEvent"],[8,"TextEvent"],[8,"TouchEvent"],[8,"UpdateEvent"]]};
searchIndex["piston"] = {"doc":"A user friendly game engine written in Rust.","items":[],"paths":[]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",4,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",4,null],[10,"serialize_element","","Serialize a sequence element.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",5,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",5,null],[10,"serialize_element","","Serialize a tuple element.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",6,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",6,null],[10,"serialize_field","","Serialize a tuple struct field.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",7,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",7,null],[10,"serialize_field","","Serialize a tuple variant field.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",8,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",8,null],[10,"serialize_key","","Serialize a map key.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",8,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",9,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",9,null],[10,"serialize_field","","Serialize a struct field.",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",10,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",10,null],[10,"serialize_field","","Serialize a struct variant field.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",11,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",11,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",11,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",11,null],[13,"Char","","The input contained a `char` that was not expected.",11,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",11,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",11,null],[13,"Unit","","The input contained a unit `()` that was not expected.",11,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",11,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",11,null],[13,"Seq","","The input contained a sequence that was not expected.",11,null],[13,"Map","","The input contained a map that was not expected.",11,null],[13,"Enum","","The input contained an enum that was not expected.",11,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",11,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",11,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",11,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",11,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",11,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_identifier","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"variant_seed","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_identifier","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",29,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",29,null],[11,"deserialize_bool","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",29,null],[11,"deserialize_identifier","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",30,null],[11,"deserialize_bool","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",30,null],[11,"deserialize_identifier","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",31,null],[11,"deserialize_bool","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",31,null],[11,"deserialize_identifier","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"borrowedbytesdeserializer"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",32,null],[11,"deserialize_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",32,null],[11,"deserialize_identifier","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",33,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",33,null],[11,"deserialize_enum","","",33,null],[11,"deserialize_identifier","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",34,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_identifier","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",35,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",35,null],[11,"deserialize_enum","","",35,null],[11,"deserialize_identifier","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",35,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_element_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",36,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",36,null],[11,"deserialize_enum","","",36,null],[11,"deserialize_identifier","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",37,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",37,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",37,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",37,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",37,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",37,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",37,null],[11,"deserialize","","",37,{"inputs":[{"name":"d"}],"output":{"generics":["ignoredany"],"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",38,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",38,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",38,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",38,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",41,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",41,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",43,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",43,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",43,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",43,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",43,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",43,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",43,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",43,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",43,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",43,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",43,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",44,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",44,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",45,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",45,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",46,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",46,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",47,null],[10,"unit_variant","","Called when deserializing a variant with no values.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",47,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",48,null],[10,"into_deserializer","","Convert this value into a deserializer.",48,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"container"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"has_getter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"attr","serde_derive_internals","",null,null],[3,"Name","serde_derive_internals::attr","",null,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",5,null],[13,"UPPERCASE","","Rename direct children to \"UPPERCASE\" style.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[13,"ScreamingKebabCase","","Rename direct children to \"SCREAMING-KEBAB-CASE\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",null,null],[13,"No","","It does not.",7,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",7,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",7,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",8,null],[13,"Default","","The default is given by `std::default::Default::default()`.",8,null],[13,"Path","","The default is given by this function.",8,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"generics":["vec"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_some","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",10,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["ty"],"name":"option"}}],[11,"into_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["ty"],"name":"option"}}],[11,"remote","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"identifier","","",10,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",11,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",11,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"other","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"deserialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"},{"generics":["variant"],"name":"option"},{"name":"default"}],"output":{"name":"self"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",12,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"default","","",12,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"deserialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"ser_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrowed_lifetimes","","",12,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"getter","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"default","serde_derive_internals","",13,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","serde_derive_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["shader_version"] = {"doc":"A helper library for detecting and picking compatible shaders.","items":[[3,"Shaders","shader_version","Shader picker.",null,null],[0,"opengl","","Models versions of OpenGL",null,null],[3,"ParseOpenGLError","shader_version::opengl","Represents an error while trying to get `OpenGL` from `&str`.",null,null],[4,"OpenGL","","",null,null],[13,"V2_0","","",0,null],[13,"V2_1","","",0,null],[13,"V3_0","","",0,null],[13,"V3_1","","",0,null],[13,"V3_2","","",0,null],[13,"V3_3","","",0,null],[13,"V4_0","","",0,null],[13,"V4_1","","",0,null],[13,"V4_2","","",0,null],[13,"V4_3","","",0,null],[13,"V4_4","","",0,null],[13,"V4_5","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"opengl"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"opengl"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"opengl"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"opengl"}],"output":{"name":"ordering"}}],[11,"get_major_minor","","Gets the minor version of OpenGL.",0,null],[11,"to_glsl","","Gets GLSL version associated with OpenGL.",0,{"inputs":[{"name":"self"}],"output":{"name":"glsl"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"glsl","shader_version","Models versions of OpenGL Shader Language (GLSL)",null,null],[3,"ParseGLSLError","shader_version::glsl","Represents an error while trying to get `GLSL` from `&str`.",null,null],[4,"GLSL","","For OpenGL version 3.3 and above, the GLSL version is the same as the OpenGL version.",null,null],[13,"V1_10","","",2,null],[13,"V1_20","","",2,null],[13,"V1_30","","",2,null],[13,"V1_40","","",2,null],[13,"V1_50","","",2,null],[13,"V3_30","","",2,null],[13,"V4_00","","",2,null],[13,"V4_10","","",2,null],[13,"V4_20","","",2,null],[13,"V4_30","","",2,null],[13,"V4_40","","",2,null],[13,"V4_50","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"glsl"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"glsl"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"glsl"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"glsl"}],"output":{"name":"ordering"}}],[11,"to_opengl","","Gets OpenGL version associated with GLSL.",2,{"inputs":[{"name":"self"}],"output":{"name":"opengl"}}],[11,"pick_shader","","",2,{"inputs":[{"name":"self"},{"name":"shaders"}],"output":{"name":"option"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[8,"PickShader","shader_version","Implemented by shader version enums.",null,null],[10,"pick_shader","","Pick shader.",4,{"inputs":[{"name":"self"},{"name":"shaders"}],"output":{"name":"option"}}],[11,"new","","Creates a new shader picker.",5,{"inputs":[],"output":{"name":"self"}}],[11,"set","","Sets source for a shader version.",5,{"inputs":[{"name":"self"},{"name":"v"},{"name":"s"}],"output":{"name":"self"}}],[11,"get","","Get the closest shader to a shader version.",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"option"}}]],"paths":[[4,"OpenGL"],[3,"ParseOpenGLError"],[4,"GLSL"],[3,"ParseGLSLError"],[8,"PickShader"],[3,"Shaders"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["deriveinput","string"],"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ty","string"],"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["path","string"],"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["whereclause","string"],"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ident","string"],"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["typarambound","string"],"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["attribute","string"],"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",58,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",58,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",58,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",58,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",58,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",58,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",58,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",58,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",58,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",58,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",58,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",58,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",58,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",58,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",58,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",58,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lit"],"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","strlit"],"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bytestrlit"],"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","u8"],"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","char"],"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","floatlit"],"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","intlit"],"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bool"],"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ty"],"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","path"],"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","tokentree"],"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ident"],"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lifetime"],"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["viewport"] = {"doc":"A library for storing viewport information","items":[[3,"Viewport","viewport","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels. `[x, y, width height]` where `(x, y)` is lower left corner.",0,null],[12,"draw_size","","The size of frame buffer in pixels.",0,null],[12,"window_size","","The size of window in points.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"abs_transform","","Computes absolute transform for 2D graphics, which uses a row major 2x3 matrix. The origin is in the upper left corner of the viewport rectangle. The x axis points to the right, and the y axis points down. The units are in points (window coordinates).",0,null]],"paths":[[3,"Viewport"]]};
searchIndex["window"] = {"doc":"Window storage and interfacing traits.","items":[[3,"NoWindow","window","A window without user interface, often used in server event loops.",null,null],[3,"Size","","Structure to store the window size.",null,null],[12,"width","","The width.",0,null],[12,"height","","The height.",0,null],[3,"Position","","Structure to store the window position.",null,null],[12,"x","","The x coordinate.",1,null],[12,"y","","The y coordinate.",1,null],[3,"WindowSettings","","Settings structure for window behavior.",null,null],[11,"new","","Creates a new `NoWindow`.",2,{"inputs":[{"name":"windowsettings"}],"output":{"name":"nowindow"}}],[11,"should_close","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_should_close","","",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"size","","",2,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"swap_buffers","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"wait_event","","",2,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"wait_event_timeout","","",2,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["input"],"name":"option"}}],[11,"poll_event","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["input"],"name":"option"}}],[11,"draw_size","","",2,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"build_from_window_settings","","Errors",2,{"inputs":[{"name":"windowsettings"}],"output":{"generics":["string"],"name":"result"}}],[11,"get_title","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"set_title","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"get_exit_on_esc","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_exit_on_esc","","",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_capture_cursor","","",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"show","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"hide","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"get_position","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["position"],"name":"option"}}],[11,"set_position","","",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[6,"ProcAddress","","The type of an OpenGL function address.",null,null],[8,"BuildFromWindowSettings","","Constructs a window from a `WindowSettings` object.",null,null],[10,"build_from_window_settings","","Builds the window from a `WindowSettings` object.",3,{"inputs":[{"name":"windowsettings"}],"output":{"generics":["string"],"name":"result"}}],[8,"Window","","Trait representing the minimum requirements for defining a window.",null,null],[10,"set_should_close","","Tells the window to close or stay open.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"should_close","","Returns true if the window should close.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"size","","Gets the size of the window.",4,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[10,"swap_buffers","","Swaps render buffers.",4,{"inputs":[{"name":"self"}],"output":null}],[10,"wait_event","","Wait indefinitely for an input event to be available from the window.",4,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[10,"wait_event_timeout","","Wait for an input event to be available from the window or for the specified timeout to be reached.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["input"],"name":"option"}}],[10,"poll_event","","Polls an input event from the window.",4,{"inputs":[{"name":"self"}],"output":{"generics":["input"],"name":"option"}}],[10,"draw_size","","Gets the draw size of the window.",4,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[8,"AdvancedWindow","","Trait representing a window with the most features that are still generic.",null,null],[10,"get_title","","Gets a copy of the title of the window.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"set_title","","Sets the title of the window.",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"title","","Sets title on window.",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[10,"get_exit_on_esc","","Gets whether to exit when pressing esc.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_exit_on_esc","","Sets whether to exit when pressing esc.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"exit_on_esc","","Sets whether to exit when pressing the Esc button.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[10,"set_capture_cursor","","Sets whether to capture/grab the cursor.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"capture_cursor","","Sets whether to capture/grab the cursor.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[10,"show","","Shows the window.",5,{"inputs":[{"name":"self"}],"output":null}],[10,"hide","","Hides the window.",5,{"inputs":[{"name":"self"}],"output":null}],[10,"get_position","","Gets the position of window.",5,{"inputs":[{"name":"self"}],"output":{"generics":["position"],"name":"option"}}],[10,"set_position","","Sets the position of window.",5,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"position","","Sets the position of window.",5,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[8,"OpenGLWindow","","Trait for OpenGL specific operations on a window.",null,null],[10,"get_proc_address","","Returns the address of the specified OpenGL function if it exists.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"procaddress"}}],[10,"is_current","","Returns true if this window's gl context is the current gl context.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"make_current","","Make the window's gl context the current gl context.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"from","","",0,null],[11,"from","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"from","","",1,null],[11,"from","","",1,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"windowsettings"}}],[11,"new","","Creates window settings with defaults.",7,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"windowsettings"}}],[11,"build","","Builds window from the given settings.",7,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"get_title","","Gets the title of built windows.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"set_title","","Sets the title of built windows.",7,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"title","","Sets the title of built windows.",7,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"get_size","","Gets the size of built windows.",7,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"set_size","","Sets the size of built windows.",7,{"inputs":[{"name":"self"},{"name":"size"}],"output":null}],[11,"size","","Sets the size of built windows.",7,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"self"}}],[11,"get_fullscreen","","Gets whether built windows will be fullscreen.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_fullscreen","","Sets whether built windows will be fullscreen.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fullscreen","","Sets whether built windows will be fullscreen.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_exit_on_esc","","Gets whether built windows should exit when the Esc key is pressed.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_exit_on_esc","","Sets whether built windows should exit when the Esc key is pressed.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"exit_on_esc","","Sets whether built windows should exit when the Esc key is pressed.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_samples","","Gets the number of samples to use for anti-aliasing.",7,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_samples","","Sets the number of samples to use for anti-aliasing.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"samples","","Sets the number of samples to use for anti-aliasing.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"get_vsync","","Gets whether built windows should use vsync.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_vsync","","Sets whether built windows should use vsync.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"vsync","","Sets whether built windows should use vsync.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_maybe_opengl","","Gets the OpenGL version of built windows.",7,{"inputs":[{"name":"self"}],"output":{"generics":["opengl"],"name":"option"}}],[11,"set_maybe_opengl","","Sets OpenGL version of built windows.",7,{"inputs":[{"name":"self"},{"generics":["opengl"],"name":"option"}],"output":null}],[11,"maybe_opengl","","Sets OpenGL version of built windows.",7,{"inputs":[{"name":"self"},{"generics":["opengl"],"name":"option"}],"output":{"name":"self"}}],[11,"set_opengl","","Sets OpenGL version of built windows.",7,{"inputs":[{"name":"self"},{"name":"opengl"}],"output":null}],[11,"opengl","","Sets the OpenGL version of built windows.",7,{"inputs":[{"name":"self"},{"name":"opengl"}],"output":{"name":"self"}}],[11,"get_srgb","","Gets whether built windows should use hardware accelerated color conversion.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_srgb","","Sets whether built windows should use hardware accelerated color conversion.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"srgb","","Sets whether built windows should use hardware accelerated color conversion.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_resizable","","Gets whether built windows should be resizable.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_resizable","","Sets whether built windows should be resizable.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"resizable","","Sets whether built windows should be resizable.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_decorated","","Gets whether built windows should be decorated.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_decorated","","Sets whether built windows should be decorated.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"decorated","","Sets whether built windows should be decorated.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_controllers","","Gets whether built windows should listen to controller input.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_controllers","","Sets whether built windows should listen to controller input.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"controllers","","Sets whether build windows should listen to controller input.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}]],"paths":[[3,"Size"],[3,"Position"],[3,"NoWindow"],[8,"BuildFromWindowSettings"],[8,"Window"],[8,"AdvancedWindow"],[8,"OpenGLWindow"],[3,"WindowSettings"]]};
initSearch(searchIndex);
